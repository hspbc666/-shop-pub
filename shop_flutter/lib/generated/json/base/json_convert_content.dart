// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:shop_flutter/network/bean/create_order_resp_entity.dart';
import 'package:shop_flutter/network/bean/query_cart_resp_entity.dart';
import 'package:shop_flutter/network/bean/query_category_resp_entity.dart';
import 'package:shop_flutter/network/bean/query_default_addr_resp_entity.dart';
import 'package:shop_flutter/network/bean/query_goods_by_category_resp_entity.dart';
import 'package:shop_flutter/network/bean/query_goods_detail_resp_entity.dart';
import 'package:shop_flutter/network/bean/query_order_detail_resp_entity.dart';
import 'package:shop_flutter/network/bean/query_order_list_resp_entity.dart';
import 'package:shop_flutter/network/bean/query_user_addr_list_resp_entity.dart';
import 'package:shop_flutter/network/bean/query_user_addr_resp_entity.dart';
import 'package:shop_flutter/network/bean/search_resp_entity.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {
  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  }

  //Go back to a single instance by type
  static M? _fromJsonSingle<M>(Map<String, dynamic> json) {
    final String type = M.toString();
    if (type == (CreateOrderRespEntity).toString()) {
      return CreateOrderRespEntity.fromJson(json) as M;
    }
    if (type == (CreateOrderRespData).toString()) {
      return CreateOrderRespData.fromJson(json) as M;
    }
    if (type == (QueryCartRespEntity).toString()) {
      return QueryCartRespEntity.fromJson(json) as M;
    }
    if (type == (QueryCartRespData).toString()) {
      return QueryCartRespData.fromJson(json) as M;
    }
    if (type == (QueryCategoryRespEntity).toString()) {
      return QueryCategoryRespEntity.fromJson(json) as M;
    }
    if (type == (QueryCategoryRespData).toString()) {
      return QueryCategoryRespData.fromJson(json) as M;
    }
    if (type == (QueryDefaultAddrRespEntity).toString()) {
      return QueryDefaultAddrRespEntity.fromJson(json) as M;
    }
    if (type == (QueryDefaultAddrRespData).toString()) {
      return QueryDefaultAddrRespData.fromJson(json) as M;
    }
    if (type == (QueryGoodsByCategoryRespEntity).toString()) {
      return QueryGoodsByCategoryRespEntity.fromJson(json) as M;
    }
    if (type == (QueryGoodsByCategoryRespData).toString()) {
      return QueryGoodsByCategoryRespData.fromJson(json) as M;
    }
    if (type == (QueryGoodsDetailRespEntity).toString()) {
      return QueryGoodsDetailRespEntity.fromJson(json) as M;
    }
    if (type == (QueryGoodsDetailRespData).toString()) {
      return QueryGoodsDetailRespData.fromJson(json) as M;
    }
    if (type == (QueryOrderDetailRespEntity).toString()) {
      return QueryOrderDetailRespEntity.fromJson(json) as M;
    }
    if (type == (QueryOrderDetailRespData).toString()) {
      return QueryOrderDetailRespData.fromJson(json) as M;
    }
    if (type == (QueryOrderDetailRespDataList).toString()) {
      return QueryOrderDetailRespDataList.fromJson(json) as M;
    }
    if (type == (QueryOrderListRespEntity).toString()) {
      return QueryOrderListRespEntity.fromJson(json) as M;
    }
    if (type == (QueryOrderListRespData).toString()) {
      return QueryOrderListRespData.fromJson(json) as M;
    }
    if (type == (QueryOrderListRespDataList).toString()) {
      return QueryOrderListRespDataList.fromJson(json) as M;
    }
    if (type == (QueryUserAddrListRespEntity).toString()) {
      return QueryUserAddrListRespEntity.fromJson(json) as M;
    }
    if (type == (QueryUserAddrListRespData).toString()) {
      return QueryUserAddrListRespData.fromJson(json) as M;
    }
    if (type == (QueryUserAddrRespEntity).toString()) {
      return QueryUserAddrRespEntity.fromJson(json) as M;
    }
    if (type == (QueryUserAddrRespData).toString()) {
      return QueryUserAddrRespData.fromJson(json) as M;
    }
    if (type == (SearchRespEntity).toString()) {
      return SearchRespEntity.fromJson(json) as M;
    }
    if (type == (SearchRespData).toString()) {
      return SearchRespData.fromJson(json) as M;
    }

    print("$type not found");

    return null;
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<CreateOrderRespEntity>[] is M) {
      return data.map<CreateOrderRespEntity>((Map<String, dynamic> e) => CreateOrderRespEntity.fromJson(e)).toList()
          as M;
    }
    if (<CreateOrderRespData>[] is M) {
      return data.map<CreateOrderRespData>((Map<String, dynamic> e) => CreateOrderRespData.fromJson(e)).toList() as M;
    }
    if (<QueryCartRespEntity>[] is M) {
      return data.map<QueryCartRespEntity>((Map<String, dynamic> e) => QueryCartRespEntity.fromJson(e)).toList() as M;
    }
    if (<QueryCartRespData>[] is M) {
      return data.map<QueryCartRespData>((Map<String, dynamic> e) => QueryCartRespData.fromJson(e)).toList() as M;
    }
    if (<QueryCategoryRespEntity>[] is M) {
      return data.map<QueryCategoryRespEntity>((Map<String, dynamic> e) => QueryCategoryRespEntity.fromJson(e)).toList()
          as M;
    }
    if (<QueryCategoryRespData>[] is M) {
      return data.map<QueryCategoryRespData>((Map<String, dynamic> e) => QueryCategoryRespData.fromJson(e)).toList()
          as M;
    }
    if (<QueryDefaultAddrRespEntity>[] is M) {
      return data
          .map<QueryDefaultAddrRespEntity>((Map<String, dynamic> e) => QueryDefaultAddrRespEntity.fromJson(e))
          .toList() as M;
    }
    if (<QueryDefaultAddrRespData>[] is M) {
      return data
          .map<QueryDefaultAddrRespData>((Map<String, dynamic> e) => QueryDefaultAddrRespData.fromJson(e))
          .toList() as M;
    }
    if (<QueryGoodsByCategoryRespEntity>[] is M) {
      return data
          .map<QueryGoodsByCategoryRespEntity>((Map<String, dynamic> e) => QueryGoodsByCategoryRespEntity.fromJson(e))
          .toList() as M;
    }
    if (<QueryGoodsByCategoryRespData>[] is M) {
      return data
          .map<QueryGoodsByCategoryRespData>((Map<String, dynamic> e) => QueryGoodsByCategoryRespData.fromJson(e))
          .toList() as M;
    }
    if (<QueryGoodsDetailRespEntity>[] is M) {
      return data
          .map<QueryGoodsDetailRespEntity>((Map<String, dynamic> e) => QueryGoodsDetailRespEntity.fromJson(e))
          .toList() as M;
    }
    if (<QueryGoodsDetailRespData>[] is M) {
      return data
          .map<QueryGoodsDetailRespData>((Map<String, dynamic> e) => QueryGoodsDetailRespData.fromJson(e))
          .toList() as M;
    }
    if (<QueryOrderDetailRespEntity>[] is M) {
      return data
          .map<QueryOrderDetailRespEntity>((Map<String, dynamic> e) => QueryOrderDetailRespEntity.fromJson(e))
          .toList() as M;
    }
    if (<QueryOrderDetailRespData>[] is M) {
      return data
          .map<QueryOrderDetailRespData>((Map<String, dynamic> e) => QueryOrderDetailRespData.fromJson(e))
          .toList() as M;
    }
    if (<QueryOrderDetailRespDataList>[] is M) {
      return data
          .map<QueryOrderDetailRespDataList>((Map<String, dynamic> e) => QueryOrderDetailRespDataList.fromJson(e))
          .toList() as M;
    }
    if (<QueryOrderListRespEntity>[] is M) {
      return data
          .map<QueryOrderListRespEntity>((Map<String, dynamic> e) => QueryOrderListRespEntity.fromJson(e))
          .toList() as M;
    }
    if (<QueryOrderListRespData>[] is M) {
      return data.map<QueryOrderListRespData>((Map<String, dynamic> e) => QueryOrderListRespData.fromJson(e)).toList()
          as M;
    }
    if (<QueryOrderListRespDataList>[] is M) {
      return data
          .map<QueryOrderListRespDataList>((Map<String, dynamic> e) => QueryOrderListRespDataList.fromJson(e))
          .toList() as M;
    }
    if (<QueryUserAddrListRespEntity>[] is M) {
      return data
          .map<QueryUserAddrListRespEntity>((Map<String, dynamic> e) => QueryUserAddrListRespEntity.fromJson(e))
          .toList() as M;
    }
    if (<QueryUserAddrListRespData>[] is M) {
      return data
          .map<QueryUserAddrListRespData>((Map<String, dynamic> e) => QueryUserAddrListRespData.fromJson(e))
          .toList() as M;
    }
    if (<QueryUserAddrRespEntity>[] is M) {
      return data.map<QueryUserAddrRespEntity>((Map<String, dynamic> e) => QueryUserAddrRespEntity.fromJson(e)).toList()
          as M;
    }
    if (<QueryUserAddrRespData>[] is M) {
      return data.map<QueryUserAddrRespData>((Map<String, dynamic> e) => QueryUserAddrRespData.fromJson(e)).toList()
          as M;
    }
    if (<SearchRespEntity>[] is M) {
      return data.map<SearchRespEntity>((Map<String, dynamic> e) => SearchRespEntity.fromJson(e)).toList() as M;
    }
    if (<SearchRespData>[] is M) {
      return data.map<SearchRespData>((Map<String, dynamic> e) => SearchRespData.fromJson(e)).toList() as M;
    }

    print("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json == null) {
      return null;
    }
    if (json is List) {
      return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return _fromJsonSingle<M>(json as Map<String, dynamic>);
    }
  }
}
